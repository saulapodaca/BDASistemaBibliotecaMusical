 /*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package itson.sistemabibliotecamusicalpresentacion;

import itson.sistemabibliotecamusicaldominio.AlbumDominio;
import itson.sistemabibliotecamusicaldominio.ArtistaDominio;
import itson.sistemabibliotecamusicaldominio.CancionDominio;
import itson.sistemabibliotecamusicaldominio.TipoFavoritoEnum;
import itson.sistemabibliotecamusicaldominio.UsuarioDominio;
import itson.sistemabibliotecamusicaldominio.dtos.ResultadosDTO;
import itson.sistemabibliotecamusicalnegocio.excepciones.NegocioException;
import itson.sistemabibliotecamusicalnegocio.fachada.IAlbumFachada;
import itson.sistemabibliotecamusicalnegocio.fachada.IArtistaFachada;
import itson.sistemabibliotecamusicalnegocio.fachada.ICancionFachada;
import itson.sistemabibliotecamusicalnegocio.fachada.IUsuarioFachada;
import itson.sistemabibliotecamusicalnegocio.fachada.implementaciones.AlbumFachada;
import itson.sistemabibliotecamusicalnegocio.fachada.implementaciones.ArtistaFachada;
import itson.sistemabibliotecamusicalnegocio.fachada.implementaciones.CancionFachada;
import itson.sistemabibliotecamusicalnegocio.fachada.implementaciones.UsuarioFachada;
import itson.sistemabibliotecamusicalpresentacion.utilidades.SesionUsuario;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Image;
import java.io.File;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;

/**
 *
 * @author Camila Zub√≠a
 */
public class PanelBuscar extends javax.swing.JPanel {

    IArtistaFachada artistaFachada;
    IAlbumFachada albumFachada;
    ICancionFachada cancionFachada;
    IUsuarioFachada usuarioFachada;
    UsuarioDominio usuario = SesionUsuario.getUsuario();
    private String tipoFiltroSeleccionado = "todo";
    
    
    /**
     * Creates new form PanelPerfil
     */
    public PanelBuscar() {
        this.artistaFachada = new ArtistaFachada();
        this.albumFachada = new AlbumFachada();
        this.cancionFachada = new CancionFachada();
        this.usuarioFachada = new UsuarioFachada();
        initComponents();
        buscarConParametros();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelFondo = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        btnTodo = new javax.swing.JButton();
        btnCanciones = new javax.swing.JButton();
        btnAlbumes = new javax.swing.JButton();
        btnArtistas = new javax.swing.JButton();
        panelListar = new javax.swing.JPanel();
        btnBuscar = new javax.swing.JButton();
        txtFieldBuscar = new javax.swing.JTextField();

        setBackground(new java.awt.Color(75, 28, 113));
        setMaximumSize(new java.awt.Dimension(1080, 648));
        setMinimumSize(new java.awt.Dimension(1080, 648));
        setPreferredSize(new java.awt.Dimension(1080, 648));

        PanelFondo.setBackground(new java.awt.Color(75, 28, 113));
        PanelFondo.setMaximumSize(new java.awt.Dimension(1080, 648));
        PanelFondo.setMinimumSize(new java.awt.Dimension(1080, 648));
        PanelFondo.setPreferredSize(new java.awt.Dimension(1080, 648));

        jPanel1.setBackground(new java.awt.Color(219, 182, 238));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.gray, java.awt.Color.darkGray));

        btnTodo.setBackground(new java.awt.Color(127, 76, 165));
        btnTodo.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        btnTodo.setForeground(new java.awt.Color(255, 255, 255));
        btnTodo.setText("Todo");
        btnTodo.setActionCommand("");
        btnTodo.setBorderPainted(false);
        btnTodo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTodoActionPerformed(evt);
            }
        });

        btnCanciones.setBackground(new java.awt.Color(127, 76, 165));
        btnCanciones.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        btnCanciones.setForeground(new java.awt.Color(255, 255, 255));
        btnCanciones.setText("Canciones");
        btnCanciones.setActionCommand("");
        btnCanciones.setBorderPainted(false);
        btnCanciones.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnCanciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancionesActionPerformed(evt);
            }
        });

        btnAlbumes.setBackground(new java.awt.Color(127, 76, 165));
        btnAlbumes.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        btnAlbumes.setForeground(new java.awt.Color(255, 255, 255));
        btnAlbumes.setText("Albumes");
        btnAlbumes.setActionCommand("");
        btnAlbumes.setBorderPainted(false);
        btnAlbumes.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnAlbumes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlbumesActionPerformed(evt);
            }
        });

        btnArtistas.setBackground(new java.awt.Color(127, 76, 165));
        btnArtistas.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        btnArtistas.setForeground(new java.awt.Color(255, 255, 255));
        btnArtistas.setText("Artistas");
        btnArtistas.setActionCommand("");
        btnArtistas.setBorderPainted(false);
        btnArtistas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnArtistas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArtistasActionPerformed(evt);
            }
        });

        panelListar.setBackground(new java.awt.Color(219, 182, 238));

        javax.swing.GroupLayout panelListarLayout = new javax.swing.GroupLayout(panelListar);
        panelListar.setLayout(panelListarLayout);
        panelListarLayout.setHorizontalGroup(
            panelListarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelListarLayout.setVerticalGroup(
            panelListarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 362, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelListar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnTodo, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(77, 77, 77)
                        .addComponent(btnCanciones)
                        .addGap(81, 81, 81)
                        .addComponent(btnAlbumes, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80)
                        .addComponent(btnArtistas, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(98, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTodo)
                    .addComponent(btnCanciones)
                    .addComponent(btnAlbumes)
                    .addComponent(btnArtistas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelListar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(61, Short.MAX_VALUE))
        );

        btnBuscar.setBackground(new java.awt.Color(127, 76, 165));
        btnBuscar.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        btnBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btnBuscar.setText("BUSCAR");
        btnBuscar.setToolTipText("");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        txtFieldBuscar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtFieldBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFieldBuscarActionPerformed(evt);
            }
        });
        txtFieldBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFieldBuscarKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout PanelFondoLayout = new javax.swing.GroupLayout(PanelFondo);
        PanelFondo.setLayout(PanelFondoLayout);
        PanelFondoLayout.setHorizontalGroup(
            PanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelFondoLayout.createSequentialGroup()
                .addGroup(PanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelFondoLayout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(btnBuscar)
                        .addGap(27, 27, 27)
                        .addComponent(txtFieldBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 653, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanelFondoLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(68, Short.MAX_VALUE))
        );
        PanelFondoLayout.setVerticalGroup(
            PanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelFondoLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(PanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscar)
                    .addComponent(txtFieldBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PanelFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(PanelFondo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTodoActionPerformed
        try {
            tipoFiltroSeleccionado = "todo";
            actualizarBotonesFiltro(btnTodo);

            List<ResultadosDTO> todo = artistaFachada.listarTodo(usuario.getGenerosNoDeseados());
            cargarBiblioteca(todo);
        } catch (NegocioException ex) {
            JOptionPane.showMessageDialog(this, "No se pudo filtrar por todo");
        }
    }//GEN-LAST:event_btnTodoActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        try {
             buscarConParametros();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "No se pudo realizar la busqueda");
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void txtFieldBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFieldBuscarActionPerformed
        
    }//GEN-LAST:event_txtFieldBuscarActionPerformed

    private void btnCancionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancionesActionPerformed
        try {
            tipoFiltroSeleccionado = "canciones";
            actualizarBotonesFiltro(btnCanciones);

            List<CancionDominio> canciones = cancionFachada.listarTodasLasCanciones(usuario.getGenerosNoDeseados());
            cargarBiblioteca(canciones);
        } catch (NegocioException ex) {
            JOptionPane.showMessageDialog(this, "No se pudo filtrar por canciones");
        }
    }//GEN-LAST:event_btnCancionesActionPerformed

    private void btnAlbumesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlbumesActionPerformed
        try {
            tipoFiltroSeleccionado = "albumes";
            actualizarBotonesFiltro(btnAlbumes);

            List<AlbumDominio> albumes = albumFachada.listarTodosLosAlbumes(usuario.getGenerosNoDeseados());
            cargarBiblioteca(albumes);
        } catch (NegocioException ex) {
            JOptionPane.showMessageDialog(this, "No se pudo filtrar por albumes");
        }
    }//GEN-LAST:event_btnAlbumesActionPerformed

    private void btnArtistasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArtistasActionPerformed
        try {
            tipoFiltroSeleccionado = "artistas";
            actualizarBotonesFiltro(btnArtistas);

            List<ArtistaDominio> artistas = artistaFachada.listarTodosLosArtistas(usuario.getGenerosNoDeseados());
            cargarBiblioteca(artistas);
        } catch (NegocioException ex) {
            JOptionPane.showMessageDialog(this, "No se pudo filtrar por artistas");
        }
    }//GEN-LAST:event_btnArtistasActionPerformed

    private void txtFieldBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFieldBuscarKeyReleased
        buscarConParametros();
    }//GEN-LAST:event_txtFieldBuscarKeyReleased

    private void buscarConParametros() {
        String texto = txtFieldBuscar.getText().trim();

        try {
            switch (tipoFiltroSeleccionado) {
                case "artistas" -> {
                    List<ArtistaDominio> artistas = artistaFachada.listarArtistasPorFiltro(texto, usuario.getGenerosNoDeseados());
                    cargarBiblioteca(artistas);
                }
                case "albumes" -> {
                    List<AlbumDominio> albumes = albumFachada.listarAlbumesPorFiltro(texto, usuario.getGenerosNoDeseados());
                    cargarBiblioteca(albumes);
                }
                case "canciones" -> {
                    List<CancionDominio> canciones = cancionFachada.listarCancionesPorFiltro(texto, usuario.getGenerosNoDeseados());
                    cargarBiblioteca(canciones);
                }
                default -> {
                    List<ResultadosDTO> todo = artistaFachada.listarTodoPorFiltro(texto, usuario.getGenerosNoDeseados());
                    cargarBiblioteca(todo);
                }
            }
        } catch (NegocioException ex) {
            JOptionPane.showMessageDialog(this, "No se pudo realizar la busqueda");
        }
    }
    
    private void actualizarBotonesFiltro(javax.swing.JButton botonSeleccionado) {
        JButton[] botones = {btnTodo, btnArtistas, btnAlbumes, btnCanciones};

        for (JButton boton : botones) {
            if (boton == botonSeleccionado) {
                boton.setBackground(new Color(75,28,113));
                boton.setForeground(Color.WHITE);
            } else {
                boton.setBackground(new Color(127,76,165));
                boton.setForeground(Color.WHITE);
            }
        }
    }
    
    private void cargarBiblioteca(List<?> registros) throws NegocioException{
        try {
            JPanel panelInterno = new JPanel();
            panelInterno.setLayout(new BoxLayout(panelInterno, BoxLayout.Y_AXIS));
            panelInterno.setPreferredSize(new Dimension(750, registros.size() * 50));
            
            for(Object o : registros){
                
                Object entidad = null;
                TipoFavoritoEnum tipo = null;
                
                if (o instanceof ResultadosDTO dto) {
                    entidad = dto.getObjeto();
                    tipo = dto.getTipo();
                } else if (o instanceof ArtistaDominio) {
                    entidad = o;
                    tipo = TipoFavoritoEnum.ARTISTA;
                } else if (o instanceof AlbumDominio) {
                    entidad = o;
                    tipo = TipoFavoritoEnum.ALBUM;
                } else if (o instanceof CancionDominio) {
                    entidad = o;
                    tipo = TipoFavoritoEnum.CANCION;
                } else {
                    continue;
                }
                
                JPanel panelElemento = new JPanel();
                panelElemento.setLayout(new BoxLayout(panelElemento, BoxLayout.X_AXIS));
                panelElemento.setPreferredSize(new Dimension(700, 50));
                panelElemento.setMaximumSize(new Dimension(700, 50));
                panelElemento.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
                panelElemento.setBackground(new Color(219, 182, 238));

                JButton btnInfo = new JButton();
                btnInfo.setFont(new Font("Arial", Font.PLAIN, 14));
                btnInfo.setAlignmentX(Component.LEFT_ALIGNMENT);
                btnInfo.setHorizontalAlignment(SwingConstants.LEFT);
                btnInfo.setPreferredSize(new Dimension(600, 40));
                btnInfo.setMaximumSize(new Dimension(Integer.MAX_VALUE, 40));
                
                JButton btnFavorito = new JButton("‚òÜ");
                btnFavorito.setFocusPainted(false);
                btnFavorito.setForeground(Color.BLACK);
                btnFavorito.setPreferredSize(new Dimension(50, 40));
                btnFavorito.setMaximumSize(new Dimension(50, 40));
                
                File imagen = null;
                
                switch (tipo) {
                    case ARTISTA -> {
                        ArtistaDominio a = (ArtistaDominio) entidad;
                        imagen = new File(a.getImagen().trim());
                        if (usuarioFachada.esFavorito(a.getId())) {
                            btnFavorito.setText("‚òÖÔ∏è");
                        }
                        btnInfo.setText(a.getNombre() + " - " + a.getGenero());
                        btnInfo.addActionListener(e -> {
                            abrirPanelArtista(a);
                        });
                        btnFavorito.addActionListener(e -> {
                            try {
                                if (usuarioFachada.esFavorito(a.getId())) {
                                    usuarioFachada.eliminarFavorito(a.getId());
                                    btnFavorito.setText("‚òÜ");
                                    btnFavorito.setForeground(Color.BLACK);
                                }else {
                                    try {
                                        usuarioFachada.agregarFavorito(a.getId());
                                    } catch (NegocioException ex) {
                                        Logger.getLogger(PanelBuscar.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                    btnFavorito.setText("‚òÖÔ∏è");
                                    btnFavorito.setForeground(Color.BLACK);
                                }
                            } catch (NegocioException ex) {
                                Logger.getLogger(PanelBuscar.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        });
                    }
                    case ALBUM ->{
                        AlbumDominio album = (AlbumDominio) entidad;
                        imagen = new File(album.getImagenPortada().trim());
                        if (usuarioFachada.esFavorito(album.getId())) {
                            btnFavorito.setText("‚òÖÔ∏è");
                        }
                        btnInfo.setText(album.getNombre() + " - " + album.getGeneroMusical() + " (" + album.getFechaLanzamiento() + ")");
                        btnInfo.addActionListener(e -> {
                            new CancionesFrm().setVisible(true);
                            this.setVisible(false);
                        });
                        btnFavorito.addActionListener(e -> {
                            try {
                                if (usuarioFachada.esFavorito(album.getId())) {
                                    usuarioFachada.eliminarFavorito(album.getId());
                                    btnFavorito.setText("‚òÜ");
                                    btnFavorito.setForeground(Color.BLACK);
                                } else {
                                    usuarioFachada.agregarFavorito(album.getId());
                                    btnFavorito.setText("‚òÖÔ∏è");
                                    btnFavorito.setForeground(Color.BLACK);
                                }
                            } catch (NegocioException ex) {
                                Logger.getLogger(PanelBuscar.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        });
                    }
                    case CANCION-> {
                        CancionDominio cancion = (CancionDominio) entidad;
                        imagen = new File(cancion.getImagenCancion().trim());
                        if (usuarioFachada.esFavorito(cancion.getId())) {
                            btnFavorito.setText("‚òÖÔ∏è");
                        }
                        btnInfo.setText(cancion.getNombre());
                        btnFavorito.addActionListener(e -> {
                            try {
                                if (usuarioFachada.esFavorito(cancion.getId())) {
                                    usuarioFachada.eliminarFavorito(cancion.getId());
                                    btnFavorito.setText("‚òÜ");
                                    btnFavorito.setForeground(Color.BLACK);
                                } else {
                                    usuarioFachada.agregarFavorito(cancion.getId());
                                    btnFavorito.setText("‚òÖÔ∏è");
                                    btnFavorito.setForeground(Color.BLACK);
                                }
                            } catch (NegocioException ex) {
                                Logger.getLogger(PanelBuscar.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        });
                    }
                    default -> {
                        JOptionPane.showMessageDialog(this, "No hay ningun registro");
                        continue;
                    }
                }
                
                ImageIcon icono = new ImageIcon(imagen.getAbsolutePath());
                Image imagenEscalada = icono.getImage().getScaledInstance(40, 40, Image.SCALE_SMOOTH);
                JLabel lblImagen = new JLabel(new ImageIcon(imagenEscalada));
                lblImagen.setAlignmentX(Component.CENTER_ALIGNMENT);

                panelElemento.add(lblImagen);
                panelElemento.add(btnInfo);
                panelElemento.add(Box.createHorizontalStrut(10));
                panelElemento.add(btnFavorito);
                panelInterno.add(panelElemento);
            }
            JScrollPane scrollPane = new JScrollPane(panelInterno);
            scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
            scrollPane.setPreferredSize(new Dimension(770, 362));
            panelListar.removeAll();
            panelListar.setLayout(new BorderLayout());
            panelListar.add(scrollPane, BorderLayout.CENTER);
            panelListar.revalidate();
            panelListar.repaint();
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, "No se pudo cargar el contenido de la biblioteca musical");
        }
    }

    private void abrirPanelArtista(ArtistaDominio artista) {
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
        PanelArtista panel = new PanelArtista(artista);

        frame.getContentPane().removeAll();
        frame.getContentPane().add(panel, BorderLayout.CENTER);
        frame.revalidate();
        frame.repaint();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelFondo;
    private javax.swing.JButton btnAlbumes;
    private javax.swing.JButton btnArtistas;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCanciones;
    private javax.swing.JButton btnTodo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel panelListar;
    private javax.swing.JTextField txtFieldBuscar;
    // End of variables declaration//GEN-END:variables
}
